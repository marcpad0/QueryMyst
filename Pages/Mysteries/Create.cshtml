@page
@model QueryMyst.Pages.Mysteries.CreateModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Create New Mystery";
}

@* Add Antiforgery Token for AJAX *@
@Html.AntiForgeryToken()

<div class="container mt-4 mb-5">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <h1 class="mb-4 text-center"><i class="bi bi-plus-square-dotted me-2"></i> Create New Mystery</h1>

            <!-- Mystery Creation Guide (Collapsible) -->
            <div class="card shadow-sm mb-4 border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-lightbulb-fill me-2"></i>
                        Guide to Creating Perfect Mysteries
                        <button class="btn btn-sm btn-outline-light float-end" type="button" data-bs-toggle="collapse" data-bs-target="#mysteryGuide" aria-expanded="false" aria-controls="mysteryGuide">
                            Show/Hide
                        </button>
                    </h5>
                </div>
                <div class="collapse" id="mysteryGuide">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h6 class="fw-bold text-primary"><i class="bi bi-card-heading me-1"></i>Title & Description</h6>
                                    <ul class="small text-muted ps-3">
                                        <li>Create an <strong>intriguing title</strong>.</li>
                                        <li>Write a <strong>concise description</strong>.</li>
                                        <li>Set the proper <strong>difficulty</strong>.</li>
                                    </ul>
                                </div>
                                <div class="mb-3">
                                     <h6 class="fw-bold text-primary"><i class="bi bi-database me-1"></i>Database Schema</h6>
                                    <ul class="small text-muted ps-3">
                                        <li>Design <strong>logical tables</strong>.</li>
                                        <li>Use <strong>meaningful names</strong> & types.</li>
                                        <li>Include <strong>foreign keys</strong>.</li>
                                        <li>Keep schema complexity appropriate.</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-6">
                                 <div class="mb-3">
                                     <h6 class="fw-bold text-primary"><i class="bi bi-table me-1"></i>Sample Data</h6>
                                     <ul class="small text-muted ps-3">
                                        <li>Include <strong>sufficient data</strong>.</li>
                                        <li>Data should <strong>tell a story</strong>.</li>
                                        <li>Add <strong>red herrings</strong> (optional).</li>
                                        <li>Ensure solution is <strong>findable</strong>.</li>
                                    </ul>
                                </div>
                                <div class="mb-3">
                                     <h6 class="fw-bold text-primary"><i class="bi bi-check-circle me-1"></i>Solution Query</h6>
                                     <ul class="small text-muted ps-3">
                                        <li>Ensure an <strong>unambiguous</strong> result.</li>
                                        <li>Match <strong>difficulty</strong> with SQL techniques.</li>
                                        <li><strong>Test</strong> your solution thoroughly.</li>
                                        <li>Consider alternative user approaches.</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="alert alert-info mt-3 small py-2">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            <strong>Pro Tip:</strong> Use the <span class="badge bg-success"><i class="bi bi-check-circle-fill"></i></span> / <span class="badge bg-danger"><i class="bi bi-x-circle-fill"></i></span> indicators and result preview below to test your SQL before submitting!
                        </div>
                    </div>
                </div>
            </div>
            <!-- End Guide -->


            <div class="card shadow-lg border-light">
                <div class="card-body p-4 p-md-5">
                    <form method="post" id="createMysteryForm" novalidate>
                        @* Display model-level errors (e.g., database save errors, final validation) *@
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        @* Section 1: Mystery Overview *@
                        <fieldset class="mb-4">
                            <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-card-heading me-2"></i>Mystery Overview</legend>
                            <div class="mb-3">
                                <label asp-for="Input.Title" class="form-label fw-bold"></label>
                                <input asp-for="Input.Title" class="form-control" placeholder="e.g., The Case of the Missing Inventory" required />
                                <span asp-validation-for="Input.Title" class="text-danger small"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Input.Description" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.Description" class="form-control" rows="3" placeholder="A brief summary of the mystery for the listing page..."></textarea>
                                <span asp-validation-for="Input.Description" class="text-danger small"></span>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label asp-for="Input.Difficulty" class="form-label fw-bold"></label>
                                    <select asp-for="Input.Difficulty" asp-items="@(new SelectList(Model.DifficultyOptions))" class="form-select" required></select>
                                    <span asp-validation-for="Input.Difficulty" class="text-danger small"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Input.Category" class="form-label fw-bold"></label>
                                    <select asp-for="Input.Category" asp-items="@(new SelectList(Model.CategoryOptions))" class="form-select" required>
                                        <option value="">-- Select Category --</option>
                                    </select>
                                    <span asp-validation-for="Input.Category" class="text-danger small"></span>
                                </div>
                            </div>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label asp-for="Input.RequiredSkillsInput" class="form-label fw-bold"></label>
                                    <input asp-for="Input.RequiredSkillsInput" class="form-control" placeholder="e.g., SELECT, JOIN, WHERE, GROUP BY" />
                                    <div class="form-text small">Enter skills separated by commas.</div>
                                    <span asp-validation-for="Input.RequiredSkillsInput" class="text-danger small"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Input.Icon" class="form-label fw-bold"></label>
                                    <input asp-for="Input.Icon" class="form-control" placeholder="<i class='bi bi-search'></i>" />
                                    <div class="form-text small">Paste HTML for an icon (e.g., from Bootstrap Icons).</div>
                                    <span asp-validation-for="Input.Icon" class="text-danger small"></span>
                                </div>
                            </div>
                        </fieldset>

                        @* Section 2: Mystery Details & SQL *@
                        <fieldset class="mb-4">
                            <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-file-earmark-text me-2"></i>Mystery Details</legend>
                            <div class="mb-3">
                                <label asp-for="Input.FullDescription" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.FullDescription" class="form-control" rows="5" placeholder="Provide the full background story, context, and the specific question the user needs to answer..." required></textarea>
                                <span asp-validation-for="Input.FullDescription" class="text-danger small"></span>
                            </div>
                        </fieldset>

                        <fieldset>
                             <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-database me-2"></i>Database & Solution</legend>
                            <div class="row g-3 mb-3">
                                <!-- Database Schema -->
                                <div class="col-md-6">
                                    <label asp-for="Input.DatabaseSchema" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                        <span>Database Schema (SQL)</span>
                                        <span id="schemaValidationStatus" class="validation-status ms-2"></span>
                                    </label>
                                    <div class="position-relative editor-wrapper">
                                        @* Textarea will be hidden and replaced by CodeMirror, but asp-for binds the model *@
                                        <textarea id="databaseSchemaInput" asp-for="Input.DatabaseSchema" placeholder="CREATE TABLE TableName (...);
CREATE TABLE AnotherTable (...);" required></textarea>
                                         <button type="button" id="expandSchemaBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1 expand-btn" data-bs-toggle="tooltip" title="Expand editor">
                                            <i class="bi bi-arrows-fullscreen"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="Input.DatabaseSchema" class="text-danger small"></span>
                                    <div id="schemaValidationError" class="text-danger small mt-1"></div>
                                </div>
                                <!-- Sample Data -->
                                <div class="col-md-6">
                                     <label asp-for="Input.SampleData" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                        <span>Sample Data (SQL)</span>
                                        <span id="dataValidationStatus" class="validation-status ms-2"></span>
                                    </label>
                                    <div class="position-relative editor-wrapper">
                                        <textarea id="sampleDataInput" asp-for="Input.SampleData" placeholder="INSERT INTO TableName (...) VALUES (...);
INSERT INTO AnotherTable (...) VALUES (...);" required></textarea>
                                         <button type="button" id="expandDataBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1 expand-btn" data-bs-toggle="tooltip" title="Expand editor">
                                            <i class="bi bi-arrows-fullscreen"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="Input.SampleData" class="text-danger small"></span>
                                    <div id="dataValidationError" class="text-danger small mt-1"></div>
                                </div>
                            </div>
                             <!-- Solution Query -->
                            <div class="mb-3">
                                <label asp-for="Input.SolutionQuery" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                    <span>Solution Query (SQL)</span>
                                    <span id="queryValidationStatus" class="validation-status ms-2"></span>
                                </label>
                                <div class="position-relative editor-wrapper">
                                     @* This textarea is for binding, CodeMirror replaces it visually *@
                                    <textarea id="solutionQueryInput" asp-for="Input.SolutionQuery" placeholder="SELECT column FROM Table WHERE condition;" required></textarea>
                                     <button type="button" id="expandQueryBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1 expand-btn" data-bs-toggle="tooltip" title="Expand editor">
                                        <i class="bi bi-arrows-fullscreen"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Input.SolutionQuery" class="text-danger small"></span>
                                <div id="queryValidationError" class="text-danger small mt-1"></div>
                            </div>
                             <!-- Query Results Preview Area -->
                             <div id="queryResultPreviewContainer" class="mt-3 rounded border bg-light" style="display: none;">
                                <h6 class="px-3 pt-3 pb-2 border-bottom bg-white rounded-top mb-0"><i class="bi bi-table me-1"></i> Solution Query Result Preview:</h6>
                                <div id="queryResultPreview" class="p-3" style="max-height: 250px; overflow: auto;">
                                    @* Results will be injected here by JavaScript *@
                                </div>
                            </div>
                        </fieldset>

                        @* Section 3: Hints & Distractors*@
                        <fieldset class="mt-4">
                             <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-lightbulb me-2"></i>Hints & Distractors</legend>
                             <div class="mb-3">
                                <label asp-for="Input.HintText" class="form-label fw-bold"></label>
                                <!-- Remove value="" attribute -->
                                <textarea asp-for="Input.HintText" class="form-control" rows="3" placeholder="Provide a subtle hint if users get stuck..." value="No hint provided."></textarea>
                                <span asp-validation-for="Input.HintText" class="text-danger small"></span>
                            </div>
                             <div class="mb-3">
                                <label asp-for="Input.FalseClues" class="form-label fw-bold"></label>
                                <!-- Remove value="" attribute -->
                                <textarea asp-for="Input.FalseClues" class="form-control" rows="3" placeholder="Add misleading information or common pitfalls to watch out for..." value="No hint provided."></textarea>
                                <span asp-validation-for="Input.FalseClues" class="text-danger small"></span>
                            </div>
                        </fieldset>

                        @* Submit Button *@
                        <div class="mt-4 pt-3 border-top text-end">
                            <a asp-page="./Index" class="btn btn-outline-secondary me-2"><i class="bi bi-x-lg me-1"></i> Cancel</a>
                            <button type="submit" class="btn btn-primary"><i class="bi bi-check-lg me-1"></i> Create Mystery</button>
                        </div>
                    </form>
                </div> @* End card-body *@
            </div> @* End card *@
        </div> @* End col *@
    </div> @* End row *@
</div> @* End container *@

<!-- Fullscreen Editor Modal -->
<div class="modal fade" id="fullscreenEditorModal" tabindex="-1" aria-labelledby="fullscreenEditorModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-fullscreen-lg-down">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="fullscreenEditorModalLabel"><i class="bi bi-code-square me-2"></i><span id="editorTitle">SQL Editor</span></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-0"> @* Remove padding for CodeMirror full fit *@
         @* This textarea will be replaced by CodeMirror when the modal opens *@
        <textarea id="fullscreenEditor"></textarea>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveEditorBtn">Apply Changes</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    @* --- CodeMirror CDN --- *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/theme/material-palenight.min.css"> @* Example theme *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/mode/sql/sql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/addon/edit/matchbrackets.min.js"></script>
    @* No specific auto-height addon needed, we'll do it manually for the query field *@


    <style>
        /* CodeMirror Base Styling */
        .CodeMirror {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            height: 200px; /* Default height for schema/data */
            font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            font-size: 0.9em;
            line-height: 1.4;
        }
        /* Height specific styling for the AUTO-EXPANDING solution query editor */
        #solutionQueryInput + .CodeMirror {
            height: auto; /* Let content determine height */
            min-height: 120px; /* Minimum height */
        }
        /* The internal scroller needs adjusting too for auto-height */
        #solutionQueryInput + .CodeMirror .CodeMirror-scroll {
            min-height: 110px; /* Should be slightly less than .CodeMirror min-height */
            height: auto;
            overflow-y: hidden; /* Hide vertical scrollbar for auto-height */
            overflow-x: auto; /* Allow horizontal scroll */
        }


        /* Focused CodeMirror editor */
        .CodeMirror-focused {
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        /* Styling for the modal's CodeMirror instance */
        #fullscreenEditorModal .modal-body .CodeMirror {
           height: calc(100vh - 180px); /* Adjust based on header/footer height */
           border: none;
           border-radius: 0;
        }
        /* Adjust height for non-fullscreen modal */
        @@media (min-width: 992px) { /* lg breakpoint */
             #fullscreenEditorModal.modal-fullscreen-lg-down .modal-body .CodeMirror {
                  height: 65vh; /* Or another suitable height */
             }
        }


        /* Hide original textareas used for binding */
        #databaseSchemaInput, #sampleDataInput, #solutionQueryInput, #fullscreenEditor {
            display: none;
        }

        /* Validation status icons */
        .validation-status .spinner-border-sm { width: 1em; height: 1em; border-width: .15em; vertical-align: text-bottom;}
        .validation-status .bi-check-circle-fill { color: var(--bs-success); font-size: 1.2em; vertical-align: middle; }
        .validation-status .bi-x-circle-fill { color: var(--bs-danger); font-size: 1.2em; vertical-align: middle; }

        /* Adjust expand button style */
        .editor-wrapper .expand-btn {
            opacity: 0.6;
            z-index: 10; /* Ensure it's above CodeMirror */
            transition: opacity 0.2s ease-in-out;
        }
        .editor-wrapper:hover .expand-btn {
            opacity: 1;
        }

        /* Improve result preview container */
        #queryResultPreviewContainer { background-color: #f8f9fa; }
        #queryResultPreview table { margin-bottom: 0; } /* Remove extra margin in preview */

        /* Make labels bold */
        .form-label.fw-bold { font-weight: 600 !important; }
        /* Add a little space below legends */
        legend { margin-bottom: 1rem !important; }

        /* Mystery Guide Styling */
        #mysteryGuide h6 { margin-bottom: 0.3rem; }
        #mysteryGuide ul { padding-left: 1.2rem; margin-bottom: 1rem;}
        #mysteryGuide .card-header { background: linear-gradient(135deg, #4e73df, #224abe); }
        #mysteryGuide .alert-info { background-color: #e7f1ff; border-color: #b9d9ff; color: #0c63e4; }
        #mysteryGuide .badge { vertical-align: middle; }

    </style>

    <script>
        (function () {
            'use strict';

            // --- Antiforgery Token ---
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : null;
            if (!token) {
                console.error("Antiforgery token not found. AJAX validation will fail.");
            }

            // --- Element References (Original Textareas) ---
            const schemaTextarea = document.getElementById('databaseSchemaInput');
            const dataTextarea = document.getElementById('sampleDataInput');
            const queryTextarea = document.getElementById('solutionQueryInput');
            const fullscreenTextarea = document.getElementById('fullscreenEditor'); // Textarea in the modal

            // --- Status & Error Display Elements ---
            const schemaStatus = document.getElementById('schemaValidationStatus');
            const dataStatus = document.getElementById('dataValidationStatus');
            const queryStatus = document.getElementById('queryValidationStatus');
            const schemaError = document.getElementById('schemaValidationError');
            const dataError = document.getElementById('dataValidationError');
            const queryError = document.getElementById('queryValidationError');

            // --- Query Preview Elements ---
            const queryResultContainer = document.getElementById('queryResultPreviewContainer');
            const queryResultPreview = document.getElementById('queryResultPreview');

            // --- Modal Elements ---
            const editorModalElement = document.getElementById('fullscreenEditorModal');
            const editorModal = new bootstrap.Modal(editorModalElement);
            const editorTitle = document.getElementById('editorTitle');
            const saveEditorBtn = document.getElementById('saveEditorBtn');
            const expandSchemaBtn = document.getElementById('expandSchemaBtn');
            const expandDataBtn = document.getElementById('expandDataBtn');
            const expandQueryBtn = document.getElementById('expandQueryBtn');

            // --- CodeMirror Instances Store ---
            let codeMirrorInstances = {};
            let fullscreenCmInstance = null;
            let activeSourceCmInstance = null;

            // --- Icons ---
            const loadingIcon = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
            const successIcon = '<i class="bi bi-check-circle-fill"></i>';
            const errorIcon = '<i class="bi bi-x-circle-fill"></i>';

            // --- CodeMirror Configuration ---
            const cmOptions = {
                mode: 'text/x-sql',
                theme: 'material-palenight', // Choose your theme
                lineNumbers: true,
                matchBrackets: true,
                indentUnit: 4,
                tabSize: 4,
                indentWithTabs: false,
                lineWrapping: true,
                // We handle height dynamically for the query editor, so viewportMargin: Infinity is less critical here
            };

            // --- Auto-Height Adjustment for Query Editor ---
            function adjustQueryEditorHeight(cmInstance) {
                if (!cmInstance) return;
                // Get the scroller element within CodeMirror
                const scrollElement = cmInstance.getScrollInfo();
                // Calculate the total height needed for the content
                const contentHeight = scrollElement.height;
                 // Get the outer CodeMirror wrapper element
                const wrapperElement = cmInstance.getWrapperElement();
                // Get the minimum height from CSS (if set, otherwise fallback)
                const minHeightStyle = window.getComputedStyle(wrapperElement).minHeight;
                const minHeight = minHeightStyle ? parseInt(minHeightStyle, 10) : 120; // Fallback to 120px

                // Set the wrapper's height, respecting the minimum height
                wrapperElement.style.height = `${Math.max(minHeight, contentHeight)}px`;

                // Refresh CodeMirror to apply the height change correctly
                cmInstance.refresh();
            }


            // --- Initialize CodeMirror Editor ---
            function initializeCodeMirror(textareaElement) {
                if (!textareaElement) return null;
                const isQueryEditor = textareaElement.id === 'solutionQueryInput';
                const currentCmOptions = {...cmOptions}; // Clone options

                // If it's the query editor, don't set fixed height initially (handled by auto-height)
                if (isQueryEditor) {
                    // The height is controlled by CSS/JS, not fixed here
                }

                const cm = CodeMirror.fromTextArea(textareaElement, currentCmOptions);

                 // Sync CodeMirror content back to the original textarea on change
                 // Also trigger validation and height adjustment after a delay
                 cm.on('change', debounce(async (instance) => {
                    instance.save(); // Updates the original textarea's value

                    // Adjust height *only* for the query editor
                    if (isQueryEditor) {
                         adjustQueryEditorHeight(instance);
                    }

                    // Trigger the appropriate validation based on the textarea ID
                    if (textareaElement.id === 'databaseSchemaInput') await validateSchema();
                    else if (textareaElement.id === 'sampleDataInput') await validateData();
                    else if (textareaElement.id === 'solutionQueryInput') await validateQuery();
                }, 500));

                // Perform initial height adjustment for the query editor after initialization
                if (isQueryEditor) {
                     // Use setTimeout to ensure the editor is fully rendered
                    setTimeout(() => adjustQueryEditorHeight(cm), 50);
                }

                return cm;
            }

            // --- Initialize Main Editors ---
            if (schemaTextarea) codeMirrorInstances.schema = initializeCodeMirror(schemaTextarea);
            if (dataTextarea) codeMirrorInstances.data = initializeCodeMirror(dataTextarea);
            if (queryTextarea) codeMirrorInstances.query = initializeCodeMirror(queryTextarea);


            // --- Debounce Function ---
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // --- Update Status Function ---
            function updateStatus(statusEl, errorEl, result) {
                statusEl.innerHTML = result.success ? successIcon : errorIcon;
                errorEl.textContent = result.success ? '' : result.message;
                errorEl.style.display = result.success ? 'none' : 'block';
            }

            // --- Clear Dependent Statuses ---
            function clearDataStatus() {
                dataStatus.innerHTML = ''; dataError.textContent = ''; dataError.style.display = 'none';
                clearQueryStatus();
            }
            function clearQueryStatus() {
                queryStatus.innerHTML = ''; queryError.textContent = ''; queryError.style.display = 'none';
                queryResultContainer.style.display = 'none'; queryResultPreview.innerHTML = '';
            }

            // --- AJAX Validation Functions (Identical to previous version) ---

            async function validateSchema() {
                clearDataStatus();
                const schemaSql = codeMirrorInstances.schema?.getValue().trim();
                if (!schemaSql) {
                    schemaStatus.innerHTML = ''; schemaError.textContent = ''; schemaError.style.display = 'none';
                    return;
                }
                schemaStatus.innerHTML = loadingIcon; schemaError.textContent = ''; schemaError.style.display = 'none';
                try {
                    const response = await fetch('?handler=ValidateSchema', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token }, body: JSON.stringify({ schemaSql: schemaSql }) });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    updateStatus(schemaStatus, schemaError, result);
                    if (!result.success) clearDataStatus();
                } catch (error) {
                    console.error('Schema validation fetch error:', error);
                    updateStatus(schemaStatus, schemaError, { success: false, message: 'Client-side error during validation.' });
                    clearDataStatus();
                }
            }

            async function validateData() {
                clearQueryStatus();
                const schemaSql = codeMirrorInstances.schema?.getValue().trim();
                const dataSql = codeMirrorInstances.data?.getValue().trim();
                if (!dataSql || !schemaSql || schemaStatus.innerHTML !== successIcon) {
                    dataStatus.innerHTML = ''; dataError.textContent = ''; dataError.style.display = 'none';
                    if (schemaStatus.innerHTML !== successIcon && dataSql) { dataError.textContent = 'Schema must be valid first.'; dataError.style.display = 'block'; }
                    return;
                }
                dataStatus.innerHTML = loadingIcon; dataError.textContent = ''; dataError.style.display = 'none';
                try {
                    const response = await fetch('?handler=ValidateData', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token }, body: JSON.stringify({ schemaSql: schemaSql, dataSql: dataSql }) });
                     if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    updateStatus(dataStatus, dataError, result);
                     if (!result.success) clearQueryStatus();
                } catch (error) {
                    console.error('Data validation fetch error:', error);
                    updateStatus(dataStatus, dataError, { success: false, message: 'Client-side error during validation.' });
                    clearQueryStatus();
                }
            }

            async function validateQuery() {
                const schemaSql = codeMirrorInstances.schema?.getValue().trim();
                const dataSql = codeMirrorInstances.data?.getValue().trim();
                const querySql = codeMirrorInstances.query?.getValue().trim();
                if (!querySql || !dataSql || !schemaSql || schemaStatus.innerHTML !== successIcon || dataStatus.innerHTML !== successIcon) {
                    queryStatus.innerHTML = ''; queryError.textContent = ''; queryError.style.display = 'none';
                    queryResultContainer.style.display = 'none'; queryResultPreview.innerHTML = '';
                     if (querySql && (schemaStatus.innerHTML !== successIcon || dataStatus.innerHTML !== successIcon)) { queryError.textContent = 'Schema and Sample Data must be valid first.'; queryError.style.display = 'block'; }
                    return;
                }
                queryStatus.innerHTML = loadingIcon; queryError.textContent = ''; queryError.style.display = 'none';
                queryResultContainer.style.display = 'none'; queryResultPreview.innerHTML = '';
                try {
                    const response = await fetch('?handler=ValidateQuery', { method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token }, body: JSON.stringify({ schemaSql: schemaSql, dataSql: dataSql, querySql: querySql }) });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    updateStatus(queryStatus, queryError, result);
                    if (result.success && result.results) {
                        queryResultPreview.innerHTML = result.results;
                        queryResultContainer.style.display = 'block';
                    } else {
                        queryResultContainer.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Query validation fetch error:', error);
                     updateStatus(queryStatus, queryError, { success: false, message: 'Client-side error during validation.' });
                    queryResultContainer.style.display = 'none';
                }
            }


            // --- Fullscreen Editor Logic (Identical to previous version) ---

            function openFullscreenEditor(sourceCmInstance, title) {
                if (!sourceCmInstance) return;
                activeSourceCmInstance = sourceCmInstance;
                editorTitle.textContent = title;
                if (fullscreenCmInstance) { fullscreenCmInstance.toTextArea(); fullscreenCmInstance = null; }
                // Make sure fullscreen textarea exists before initializing CM on it
                 if (!fullscreenTextarea) { console.error("Fullscreen textarea not found!"); return;}
                 fullscreenCmInstance = CodeMirror.fromTextArea(fullscreenTextarea, cmOptions);
                fullscreenCmInstance.setValue(sourceCmInstance.getValue());
                editorModal.show();
                setTimeout(() => { if (fullscreenCmInstance) { fullscreenCmInstance.refresh(); fullscreenCmInstance.focus(); } }, 250);
            }

            if (expandSchemaBtn && codeMirrorInstances.schema) { expandSchemaBtn.addEventListener('click', () => openFullscreenEditor(codeMirrorInstances.schema, "Database Schema Editor")); }
            if (expandDataBtn && codeMirrorInstances.data) { expandDataBtn.addEventListener('click', () => openFullscreenEditor(codeMirrorInstances.data, "Sample Data Editor")); }
            if (expandQueryBtn && codeMirrorInstances.query) { expandQueryBtn.addEventListener('click', () => openFullscreenEditor(codeMirrorInstances.query, "Solution Query Editor")); }

            if (saveEditorBtn) {
                saveEditorBtn.addEventListener('click', () => {
                    if (!activeSourceCmInstance || !fullscreenCmInstance) return;
                    const newValue = fullscreenCmInstance.getValue();
                    activeSourceCmInstance.setValue(newValue);
                    activeSourceCmInstance.save();
                    editorModal.hide(); // Triggers hidden.bs.modal

                    // Manually trigger validation and *height adjustment* if it was the query editor
                     if (activeSourceCmInstance === codeMirrorInstances.schema) validateSchema();
                     else if (activeSourceCmInstance === codeMirrorInstances.data) validateData();
                     else if (activeSourceCmInstance === codeMirrorInstances.query) {
                         validateQuery();
                         adjustQueryEditorHeight(activeSourceCmInstance); // Adjust height after applying changes
                     }

                     // activeSourceCmInstance is cleared in hidden.bs.modal
                });
            }

            editorModalElement.addEventListener('hidden.bs.modal', () => {
                if (fullscreenCmInstance) { fullscreenCmInstance.toTextArea(); fullscreenCmInstance = null; }
                 activeSourceCmInstance = null; // Clear source reference
            });


             // --- Initialize Tooltips ---
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));


            // --- Prevent Double Submission ---
            const form = document.getElementById('createMysteryForm');
            if (form) {
                form.addEventListener('submit', function (event) {
                    if (codeMirrorInstances.schema) codeMirrorInstances.schema.save();
                    if (codeMirrorInstances.data) codeMirrorInstances.data.save();
                    if (codeMirrorInstances.query) codeMirrorInstances.query.save();
                    const submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton && !submitButton.disabled) {
                         submitButton.disabled = true;
                        setTimeout(() => { submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...'; }, 10);
                    }
                }, false);
            }

        })();
    </script>
}