@page
@model QueryMyst.Pages.Mysteries.CreateModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Create New Mystery";
}

@* Add Antiforgery Token for AJAX *@
@Html.AntiForgeryToken()

<div class="container mt-4 mb-5">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <h1 class="mb-4 text-center"><i class="bi bi-plus-square-dotted me-2"></i> Create New Mystery</h1>
            
            <!-- Mystery Creation Guide -->
            <div class="card shadow-sm mb-4 border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-lightbulb-fill me-2"></i>
                        Guide to Creating Perfect Mysteries
                        <button class="btn btn-sm btn-outline-light float-end" type="button" data-bs-toggle="collapse" data-bs-target="#mysteryGuide" aria-expanded="false" aria-controls="mysteryGuide">
                            Show/Hide
                        </button>
                    </h5>
                </div>
                <div class="collapse" id="mysteryGuide">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h5><i class="bi bi-card-heading text-primary me-2"></i>Title & Description</h5>
                                    <ul class="small">
                                        <li>Create an <strong>intriguing title</strong> that hints at the mystery without giving away the solution</li>
                                        <li>Write a <strong>concise description</strong> that draws users in</li>
                                        <li>Set the proper <strong>difficulty level</strong> based on SQL complexity</li>
                                    </ul>
                                </div>
                                
                                <div class="mb-3">
                                    <h5><i class="bi bi-database text-primary me-2"></i>Database Schema</h5>
                                    <ul class="small">
                                        <li>Design tables with <strong>logical relationships</strong></li>
                                        <li>Use <strong>meaningful column names</strong> and appropriate data types</li>
                                        <li>Include <strong>foreign keys</strong> where relationships exist</li>
                                        <li>Keep the schema just complex enough for the challenge</li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h5><i class="bi bi-table text-primary me-2"></i>Sample Data</h5>
                                    <ul class="small">
                                        <li>Include <strong>enough data</strong> to make the problem interesting</li>
                                        <li>Create data that <strong>tells a story</strong> relevant to the mystery</li>
                                        <li>Add some <strong>red herrings</strong> for more advanced mysteries</li>
                                        <li>Ensure the solution is <strong>findable</strong> with the data provided</li>
                                    </ul>
                                </div>
                                
                                <div class="mb-3">
                                    <h5><i class="bi bi-check-circle text-primary me-2"></i>Solution Query</h5>
                                    <ul class="small">
                                        <li>Make the solution <strong>unambiguous</strong> - there should be one clear answer</li>
                                        <li>Match the <strong>difficulty level</strong> with appropriate SQL techniques</li>
                                        <li>Test your solution <strong>before</strong> publishing</li>
                                        <li>Consider different approaches users might take</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            <strong>Pro Tip:</strong> Use the validation tools to test your schema, data and query before submitting your mystery!
                        </div>
                    </div>
                </div>
            </div>
            <!-- End Guide -->

            <div class="card shadow-lg border-light">
                <div class="card-body p-4 p-md-5">
                    <form method="post" id="createMysteryForm" novalidate>
                        @* Display model-level errors (e.g., database save errors) *@
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        @* Section 1: Mystery Overview *@
                        <fieldset class="mb-4">
                            <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-card-heading me-2"></i>Mystery Overview</legend>
                            <div class="mb-3">
                                <label asp-for="Input.Title" class="form-label fw-bold"></label>
                                <input asp-for="Input.Title" class="form-control" placeholder="e.g., The Case of the Duplicate Orders" required />
                                <span asp-validation-for="Input.Title" class="text-danger small"></span>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Input.Description" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.Description" class="form-control" rows="3" placeholder="A brief summary of the mystery for the listing page..."></textarea>
                                <span asp-validation-for="Input.Description" class="text-danger small"></span>
                            </div>
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label asp-for="Input.Difficulty" class="form-label fw-bold"></label>
                                    <select asp-for="Input.Difficulty" asp-items="@(new SelectList(Model.DifficultyOptions))" class="form-select" required></select>
                                    <span asp-validation-for="Input.Difficulty" class="text-danger small"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Input.Category" class="form-label fw-bold"></label>
                                    <select asp-for="Input.Category" asp-items="@(new SelectList(Model.CategoryOptions))" class="form-select" required>
                                        <option value="">-- Select Category --</option>
                                    </select>
                                    <span asp-validation-for="Input.Category" class="text-danger small"></span>
                                </div>
                            </div>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label asp-for="Input.RequiredSkillsInput" class="form-label fw-bold"></label>
                                    <input asp-for="Input.RequiredSkillsInput" class="form-control" placeholder="e.g., SELECT, JOIN, WHERE, GROUP BY" />
                                    <div class="form-text">Enter skills separated by commas.</div>
                                    <span asp-validation-for="Input.RequiredSkillsInput" class="text-danger small"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Input.Icon" class="form-label fw-bold"></label>
                                    <input asp-for="Input.Icon" class="form-control" placeholder="<i class='bi bi-search'></i>" />
                                    <div class="form-text">Paste HTML for an icon (e.g., from Bootstrap Icons).</div>
                                    <span asp-validation-for="Input.Icon" class="text-danger small"></span>
                                </div>
                            </div>
                        </fieldset>

                        @* Section 2: Mystery Details & SQL *@
                        <fieldset class="mb-4">
                            <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-file-earmark-text me-2"></i>Mystery Details</legend>
                            <div class="mb-3">
                                <label asp-for="Input.FullDescription" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.FullDescription" class="form-control" rows="5" placeholder="Provide the full background story, context, and the specific question the user needs to answer..." required></textarea>
                                <span asp-validation-for="Input.FullDescription" class="text-danger small"></span>
                            </div>
                        </fieldset>

                        <fieldset>
                             <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-database me-2"></i>Database & Solution</legend>
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label asp-for="Input.DatabaseSchema" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                        <span>Database Schema (SQL)</span>
                                        <span id="schemaValidationStatus" class="validation-status ms-2"></span>
                                    </label>
                                    <div class="position-relative">
                                        <textarea id="databaseSchemaInput" asp-for="Input.DatabaseSchema" class="form-control font-monospace code-editor fixed-height" rows="10" placeholder="CREATE TABLE TableName (...);&#10;CREATE TABLE AnotherTable (...);" required></textarea>
                                        <button type="button" id="expandSchemaBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1" data-bs-toggle="tooltip" title="Expand editor">
                                            <i class="bi bi-arrows-fullscreen"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="Input.DatabaseSchema" class="text-danger small"></span>
                                    <div id="schemaValidationError" class="text-danger small mt-1"></div>
                                </div>
                                <div class="col-md-6">
                                     <label asp-for="Input.SampleData" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                        <span>Sample Data (SQL)</span>
                                        <span id="dataValidationStatus" class="validation-status ms-2"></span>
                                    </label>
                                    <div class="position-relative">
                                        <textarea id="sampleDataInput" asp-for="Input.SampleData" class="form-control font-monospace code-editor fixed-height" rows="10" placeholder="INSERT INTO TableName (...) VALUES (...);&#10;INSERT INTO AnotherTable (...) VALUES (...);" required></textarea>
                                        <button type="button" id="expandDataBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1" data-bs-toggle="tooltip" title="Expand editor">
                                            <i class="bi bi-arrows-fullscreen"></i>
                                        </button>
                                    </div>
                                    <span asp-validation-for="Input.SampleData" class="text-danger small"></span>
                                    <div id="dataValidationError" class="text-danger small mt-1"></div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Input.SolutionQuery" class="form-label fw-bold d-flex justify-content-between align-items-center">
                                    <span>Solution Query (SQL)</span>
                                    <span id="queryValidationStatus" class="validation-status ms-2"></span>
                                </label>
                                <div class="position-relative">
                                    <textarea id="solutionQueryInput" asp-for="Input.SolutionQuery" class="form-control font-monospace code-editor auto-expand" rows="7" placeholder="SELECT column FROM Table WHERE condition;" required></textarea>
                                    <button type="button" id="expandQueryBtn" class="btn btn-sm btn-secondary position-absolute top-0 end-0 m-1" data-bs-toggle="tooltip" title="Expand editor">
                                        <i class="bi bi-arrows-fullscreen"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Input.SolutionQuery" class="text-danger small"></span>
                                <div id="queryValidationError" class="text-danger small mt-1"></div>
                            </div>
                             @* Area to display query results preview *@
                             <div id="queryResultPreviewContainer" class="mt-3" style="display: none;">
                                <h6><i class="bi bi-table me-1"></i> Solution Query Result Preview:</h6>
                                <div id="queryResultPreview" class="border p-2 rounded bg-light small" style="max-height: 200px; overflow-y: auto;">
                                    @* Results will be injected here by JavaScript *@
                                </div>
                            </div>
                        </fieldset>

                        @* Section 3: Hints & Distractors (Optional) *@
                        <fieldset class="mt-4">
                             <legend class="h5 mb-3 border-bottom pb-2"><i class="bi bi-lightbulb me-2"></i>Hints & Distractors (Optional)</legend>
                             <div class="mb-3">
                                <label asp-for="Input.HintText" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.HintText" class="form-control" rows="3" placeholder="Provide a subtle hint if users get stuck..."></textarea>
                                <span asp-validation-for="Input.HintText" class="text-danger small"></span>
                            </div>
                             <div class="mb-3">
                                <label asp-for="Input.FalseClues" class="form-label fw-bold"></label>
                                <textarea asp-for="Input.FalseClues" class="form-control" rows="3" placeholder="Add misleading information or common pitfalls to watch out for..."></textarea>
                                <span asp-validation-for="Input.FalseClues" class="text-danger small"></span>
                            </div>
                        </fieldset>

                        @* Submit Button *@
                        <div class="mt-4 pt-3 border-top text-end">
                            <a asp-page="./Index" class="btn btn-secondary me-2"><i class="bi bi-x-lg me-1"></i> Cancel</a>
                            <button type="submit" class="btn btn-success"><i class="bi bi-check-lg me-1"></i> Create Mystery</button>
                        </div>
                    </form>
                </div> @* End card-body *@
            </div> @* End card *@
        </div> @* End col *@
    </div> @* End row *@
</div> @* End container *@

<!-- Fullscreen Editor Modal -->
<div class="modal fade" id="fullscreenEditorModal" tabindex="-1" aria-labelledby="fullscreenEditorModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-fullscreen-lg-down">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="fullscreenEditorModalLabel"><i class="bi bi-code-square me-2"></i><span id="editorTitle">SQL Editor</span></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <textarea id="fullscreenEditor" class="form-control font-monospace code-editor" rows="15"></textarea>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveEditorBtn">Apply Changes</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <style>
        /* Ensure textareas for code use a monospace font and have basic styling */
        .code-editor {
            font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            font-size: 0.9em;
            background-color: #f8f9fa; /* Light background for code */
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            tab-size: 4; /* Set tab size */
        }
        
        /* Fixed height for schema and sample data */
        .code-editor.fixed-height {
            line-height: 1.2;
            white-space: pre;
            overflow-x: auto;
            overflow-y: auto;
            resize: vertical;
        }
        
        /* Auto-expanding for solution query */
        .code-editor.auto-expand {
            line-height: 1.5;
            min-height: 120px; /* Minimum height */
            resize: vertical;
        }
        
        /* Improve focus state for code editors */
        .code-editor:focus {
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        /* Make labels bold */
        .form-label.fw-bold {
            font-weight: 600 !important;
        }
        /* Add a little space below legends */
        legend {
            margin-bottom: 1rem !important;
        }
        .validation-status .spinner-border-sm { width: 1em; height: 1em; border-width: .15em; }
        .validation-status .bi-check-circle-fill { color: var(--bs-success); }
        .validation-status .bi-x-circle-fill { color: var(--bs-danger); }
        #queryResultPreview table { margin-bottom: 0; } /* Remove extra margin in preview */
        #queryResultPreviewContainer { background-color: #f8f9fa; padding: 1rem; border-radius: 0.25rem;}

        /* Mystery Guide Styling */
        #mysteryGuide h5 {
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }
        #mysteryGuide ul {
            padding-left: 1.5rem;
        }
        #mysteryGuide .card-header {
            background: linear-gradient(135deg, #4e73df, #224abe);
        }
        #mysteryGuide .alert-info {
            background-color: #e7f1ff;
            border-color: #b9d9ff;
            color: #0c63e4;
        }
        /* Expand button styling */
        .position-relative .btn-sm {
            opacity: 0.6;
            z-index: 10;
        }
        .position-relative .btn-sm:hover {
            opacity: 1;
        }
    </style>
    <script>
        (function () {
            'use strict';

            // --- Get Antiforgery Token ---
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : null;

            if (!token) {
                console.error("Antiforgery token not found. AJAX validation will fail.");
            }

            // --- Element References ---
            const schemaInput = document.getElementById('databaseSchemaInput');
            const dataInput = document.getElementById('sampleDataInput');
            const queryInput = document.getElementById('solutionQueryInput');
            
            const expandSchemaBtn = document.getElementById('expandSchemaBtn');
            const expandDataBtn = document.getElementById('expandDataBtn');
            const expandQueryBtn = document.getElementById('expandQueryBtn');
            
            const fullscreenEditor = document.getElementById('fullscreenEditor');
            const saveEditorBtn = document.getElementById('saveEditorBtn');
            const editorModal = new bootstrap.Modal(document.getElementById('fullscreenEditorModal'));
            const editorTitle = document.getElementById('editorTitle');

            const schemaStatus = document.getElementById('schemaValidationStatus');
            const dataStatus = document.getElementById('dataValidationStatus');
            const queryStatus = document.getElementById('queryValidationStatus');

            const schemaError = document.getElementById('schemaValidationError');
            const dataError = document.getElementById('dataValidationError');
            const queryError = document.getElementById('queryValidationError');

            const queryResultContainer = document.getElementById('queryResultPreviewContainer');
            const queryResultPreview = document.getElementById('queryResultPreview');

            // --- Initialize Tooltips ---
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

            // --- Track active editor for fullscreen modal ---
            let activeEditorSource = null;

            // --- Icons ---
            const loadingIcon = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
            const successIcon = '<i class="bi bi-check-circle-fill fs-5"></i>';
            const errorIcon = '<i class="bi bi-x-circle-fill fs-5"></i>';
            
            // --- Auto-resize for Solution Query only ---
            function autoResizeQueryArea() {
                // Only apply auto-resize to the Solution Query
                if (queryInput) {
                    queryInput.style.height = 'auto';
                    queryInput.style.height = (queryInput.scrollHeight) + 'px';
                }
            }
            
            // Add event listener to auto-resize the Solution Query textarea
            if (queryInput) {
                queryInput.addEventListener('input', autoResizeQueryArea);
                
                // Initial resize after page load
                setTimeout(() => {
                    autoResizeQueryArea();
                }, 100);
            }

            // --- Expand Editor Functionality ---
            function setupExpandButtons() {
                if (expandSchemaBtn) {
                    expandSchemaBtn.addEventListener('click', function() {
                        activeEditorSource = schemaInput;
                        fullscreenEditor.value = schemaInput.value;
                        editorTitle.textContent = "Database Schema Editor";
                        editorModal.show();
                    });
                }
                
                if (expandDataBtn) {
                    expandDataBtn.addEventListener('click', function() {
                        activeEditorSource = dataInput;
                        fullscreenEditor.value = dataInput.value;
                        editorTitle.textContent = "Sample Data Editor";
                        editorModal.show();
                    });
                }
                
                if (expandQueryBtn) {
                    expandQueryBtn.addEventListener('click', function() {
                        activeEditorSource = queryInput;
                        fullscreenEditor.value = queryInput.value;
                        editorTitle.textContent = "Solution Query Editor";
                        editorModal.show();
                    });
                }
            }

            // --- Save from fullscreen editor back to main form ---
            if (saveEditorBtn) {
                saveEditorBtn.addEventListener('click', function() {
                    if (!activeEditorSource) return;
                    
                    activeEditorSource.value = fullscreenEditor.value;
                    editorModal.hide();
                    
                    // Trigger validation based on which editor we were using
                    if (activeEditorSource === schemaInput) validateSchema();
                    else if (activeEditorSource === dataInput) validateData();
                    else if (activeEditorSource === queryInput) {
                        validateQuery();
                        // If it's the query editor, we also need to resize it
                        autoResizeQueryArea();
                    }
                    
                    activeEditorSource = null;
                });
            }

            // --- Debounce Function ---
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // --- Update Status Function ---
            function updateStatus(statusEl, errorEl, result) {
                statusEl.innerHTML = result.success ? successIcon : errorIcon;
                errorEl.textContent = result.success ? '' : result.message;
                errorEl.style.display = result.success ? 'none' : 'block';
            }

            // --- Clear Dependent Statuses ---
            function clearDataStatus() {
                dataStatus.innerHTML = '';
                dataError.textContent = '';
                dataError.style.display = 'none';
                clearQueryStatus(); // Also clear query status if schema/data changes
            }
            function clearQueryStatus() {
                queryStatus.innerHTML = '';
                queryError.textContent = '';
                queryError.style.display = 'none';
                queryResultContainer.style.display = 'none';
                queryResultPreview.innerHTML = '';
            }


            // --- Validation Logic ---
            const validateSchema = debounce(async () => {
                clearDataStatus(); // Clear downstream validation
                const schemaSql = schemaInput.value.trim();
                if (!schemaSql) {
                    schemaStatus.innerHTML = ''; // Clear status if empty
                    schemaError.textContent = '';
                    schemaError.style.display = 'none';
                    return;
                }

                schemaStatus.innerHTML = loadingIcon;
                schemaError.textContent = '';
                schemaError.style.display = 'none';

                try {
                    const response = await fetch('?handler=ValidateSchema', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token // Send token in header
                        },
                        body: JSON.stringify({ schemaSql: schemaSql })
                    });

                    if (!response.ok) {
                         throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    updateStatus(schemaStatus, schemaError, result);

                } catch (error) {
                    console.error('Schema validation fetch error:', error);
                    schemaStatus.innerHTML = errorIcon;
                    schemaError.textContent = 'Client-side error validating schema. See console.';
                    schemaError.style.display = 'block';
                }
            }, 750); // Wait 750ms after user stops typing

            const validateData = debounce(async () => {
                clearQueryStatus(); // Clear downstream validation
                const schemaSql = schemaInput.value.trim();
                const dataSql = dataInput.value.trim();

                if (!dataSql || !schemaSql) { // Need both schema and data
                    dataStatus.innerHTML = '';
                    dataError.textContent = '';
                    dataError.style.display = 'none';
                    return;
                }

                dataStatus.innerHTML = loadingIcon;
                dataError.textContent = '';
                dataError.style.display = 'none';

                try {
                    const response = await fetch('?handler=ValidateData', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ schemaSql: schemaSql, dataSql: dataSql })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    updateStatus(dataStatus, dataError, result);

                } catch (error) {
                    console.error('Data validation fetch error:', error);
                    dataStatus.innerHTML = errorIcon;
                    dataError.textContent = 'Client-side error validating data. See console.';
                    dataError.style.display = 'block';
                }
            }, 750);

            const validateQuery = debounce(async () => {
                const schemaSql = schemaInput.value.trim();
                const dataSql = dataInput.value.trim();
                const querySql = queryInput.value.trim();

                if (!querySql || !dataSql || !schemaSql) { // Need all three
                    queryStatus.innerHTML = '';
                    queryError.textContent = '';
                    queryError.style.display = 'none';
                    queryResultContainer.style.display = 'none';
                    queryResultPreview.innerHTML = '';
                    return;
                }

                queryStatus.innerHTML = loadingIcon;
                queryError.textContent = '';
                queryError.style.display = 'none';
                queryResultContainer.style.display = 'none'; // Hide preview initially
                queryResultPreview.innerHTML = '';

                try {
                    const response = await fetch('?handler=ValidateQuery', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ schemaSql: schemaSql, dataSql: dataSql, querySql: querySql })
                    });

                     if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    updateStatus(queryStatus, queryError, result);

                    if (result.success && result.results) {
                        queryResultPreview.innerHTML = result.results; // Inject HTML table
                        queryResultContainer.style.display = 'block'; // Show preview container
                    } else {
                        queryResultContainer.style.display = 'none';
                    }

                } catch (error) {
                    console.error('Query validation fetch error:', error);
                    queryStatus.innerHTML = errorIcon;
                    queryError.textContent = 'Client-side error validating query. See console.';
                    queryError.style.display = 'block';
                    queryResultContainer.style.display = 'none';
                }
            }, 750);

            // --- Attach Event Listeners ---
            // Using 'input' with debounce for real-time feedback
            if (schemaInput) schemaInput.addEventListener('input', validateSchema);
            if (dataInput) dataInput.addEventListener('input', validateData);
            if (queryInput) queryInput.addEventListener('input', validateQuery);

            // --- Set up expand buttons ---
            setupExpandButtons();

            // --- Prevent Double Submission (Keep existing logic) ---
            var form = document.getElementById('createMysteryForm');
            if (form) {
                form.addEventListener('submit', function (event) {
                    // Optionally re-validate everything synchonously before submit? (more complex)
                    var submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton) {
                        setTimeout(function () { submitButton.disabled = true; }, 0);
                        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
                    }
                }, false);
            }

        })();
    </script>
}